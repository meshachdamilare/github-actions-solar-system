name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
jobs:

# We run a unit test that connects to db running in a service container
# The node is not running inside the container
    unit-testing:
      name: Unit Testing
      services:
        mongodb:
          image: siddharth67/mongo-db:non-prod
          ports:
            - 27017-27017
      env:
        MONGO_URI: 'mongodb://localhost:32768/superData'
        MONGO_USERNAME: non-prod-user
        MONGO_PASSWORD: non-prod-password

      strategy:
        matrix:
          nodejs_version: [18]
          operating_system: [ubuntu-latest]
          # exclude:
          #   - nodejs_version: 18
          #     operating_system: macos-latest

      runs-on: ${{ matrix.operating_system }}

      steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup NodeJS Version - ${{ matrix.nodejs_version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.nodejs_version }}

      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
    
      - name: Install Dependencies
        run: npm install
      
      # - name: Composite Action - Cache & Install NPM Packages
      #   uses: ./.github/custom-actions/npm-action
      #   with:
      #     path-to-folder: node_modules
  
      - name: Unit Testing
        id: nodejs-unit-testing-step
        run: npm test
        
      - name: Archive Test Result
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Mocha-Test-Result
          path: test-results.xml
          retention-days: 5


# We run the test coverage in a container both the application and the db
# Since it's a container to conatiner application we do not need to expose port
# And you can access the db with the service name 'mongo' 
# This is how to automate testing that involves DB.... It's call Mocking
    code-coverage:
      name: Code Coverage
      runs-on: ubuntu-latest
      container: 
        image: node:18
      services:
        mongodb:
          image: siddharth67/mongo-db:non-prod
          options: 
            --name mongo
      env:
        MONGO_URI: 'mongodb://mongo:32768/superData'
        MONGO_USERNAME: non-prod-user
        MONGO_PASSWORD: non-prod-password

      steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # - name: Setup NodeJS Version - 18
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: 18

      # - name: Composite Action - Cache & Install NPM Packages
      #   uses: ./.github/custom-actions/npm-action
      #   with:
      #     path-to-folder: node_modules

      - name: Install Dependencies
        run: npm install
  
      - name: Check Code Coverage
        continue-on-error: true
        run: npm run coverage
        
      - name: Archive Test Result
        uses: actions/upload-artifact@v3
        with:
          name: Code-Coverage-Result
          path: coverage
          retention-days: 5

# Report the test results and save it to AWS s3 bucket 
    reports-S3:
      needs: [code-coverage, unit-testing] 
      name: AWS S3 - Upload Reports 
      runs-on: ubuntu-latest 
      continue-on-error: true 
      steps:
      - name: Download Mocha Test Artifact 
        uses: actions/download-artifact@v3 
        with:
          name: Mocha-Test-Result

      - name: Download Code Coverage Artifact
        uses: actions/download-artifact@v3 
        with:
          name: Code-Coverage-Result

      - name: Merge Test Files 
        run: |
          ls -ltr
          mkdir reports-${{ github.sha }}
          mv cobertura-coverage.xml reports-${ github.sha }}.
          mv test-results.xml reports-${{ github.sha }}/
          ls -ltr reports-${{ github.sha }}/

      - name: Upload to AWS S3
        uses: jakejarvis/s-sync-action@master 
        with:
          args: --follow-symlinks --delete 
        env:
          AWS_S3_BUCKET: solar-system-reports-bucket
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'us-east-1'
          SOURCE DIR: 'reports-${{ github.sha }}'
          DEST_DIR: 'reports-${{ github.sha }}'

    docker:
      name: Containerization
      needs: [unit-testing, code-coverage]

      #Permission to write to the GHCR package
      permissions: 
        packages: write

      runs-on: ubuntu-latest

      steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image for testing
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

      - name: Docker image Test
        run: |
          docker images
          docker run --name solar-system-app -d \
          -p 3000:3000 \
          -e MONGO_URI=$MONGO_URI \
          -e MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
          -e MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
          ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

          export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
          echo $IP

          echo Test the image URL using wget
          wget -q -O- 127.0.0.1:3000/live | grep live

      - name: Container Registry Push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
              ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
              ghcr.io/${{ github.repository_owner}}/solar-system:${{ github.sha }}

    dev-deploy:
      if: contains(github.ref, 'feature/')
      needs: [docker]
      uses: ./.github/workflows/reusable-deployment.yml
      secrets:
        k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
        mongodb_password: ${{ secrets.MONGO_PASSWORD }}
      with:
        mongodb-uri: ${{ vars.MONGO_URI }}
        environment: development
        kubectl-version:
        kube-manifest-dir: kubernetes/development/

    dev-integration-testing:
      if: contains(github.ref, 'feature/')
      needs: dev-deploy
      uses: ./.github/workflows/reusable-workflow.yml
      with:
        ingress-url: ${{ needs.dev-deploy.outputs.application-url }} # To use output from the reusable workflow
     
    prod-deploy:
      if: github.ref == 'refs/heads/main'
      needs: [docker]
      uses: ./.github/workflows/reusable-deployment.yml
      secrets:
        k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
        mongodb_password: ${{ secrets.MONGO_PASSWORD }}
      with:
        mongodb-uri: ${{ vars.MONGO_URI }}
        environment: production
        kubectl-version:
        kube-manifest-dir: kubernetes/production/
    
    prod-integration-testing:
      if: github.ref == 'refs/heads/main'
      name: Prod Integration Testing
      needs: prod-deploy
      runs-on: ubuntu-latest

      steps:
      - name: Test URL Output using CURL and JQ
        env:
          URL: ${{ needs.prod-deploy.outputs.application-url }}  # To use output from the reusable workflow
        run: |
          echo $URL
          echo "---------------------------------------------"
          curl https://$URL/live-s-k -s -k | jq -r .status | grep -i live
  
# Action job to sends notification to slack-channel dedicated for github actions tasks
    slack-notification:
        if: always()
        name: Slack Notification
        needs: [dev-integration-testing, prod-integration-testing] 
        continue-on-error: true 
        runs-on: ubuntu-latest 
        steps:
        - uses: actions/checkout@v4
        - name: Slack Notification
          uses: rtCamp/action-slack-notify@v2 
          env:
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
            SLACK_CHANNEL: github-actions-channel-2
            SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff#'
            #SLACK_ICON: https://gitlab.com/sidd-harth/solar-system/-/raw/main/images/saturn.png
            SLACK MESSAGE: ':hammer_and_wrench: Triggered by ${{ github.actor }}'
            SLACK_TITLE: Information