name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
jobs:

# We run a unit test that connects to db running in a service container
# The node is not running inside the container
    unit-testing:
        name: Unit Testing

        services:
          mongodb:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017-27017

        env:
            MONGO_URI: 'mongodb://localhost:32768/superData'
            MONGO_USERNAME: non-prod-user
            MONGO_PASSWORD: non-prod-password

        strategy:
          matrix:
            nodejs_version: [18]
            operating_system: [ubuntu-latest]
            # exclude:
            #   - nodejs_version: 18
            #     operating_system: macos-latest

        runs-on: ${{ matrix.operating_system }}

        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version - ${{ matrix.nodejs_version }}
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.nodejs_version }}

        - name: Cache NPM dependencies
          uses: actions/cache@v3
          with:
            path: ~/.npm
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
      
        - name: Install Dependencies
          run: npm install
        
        # - name: Composite Action - Cache & Install NPM Packages
        #   uses: ./.github/custom-actions/npm-action
        #   with:
        #     path-to-folder: node_modules
    
        - name: Unit Testing
          id: nodejs-unit-testing-step
          run: npm test
          
        - name: Archive Test Result
          if: always()
          uses: actions/upload-artifact@v3
          with:
            name: Mocha-Test-Result
            path: test-results.xml
            retention-days: 5


# We run the test coverage in a container both the application and the db
# Since it's a container to conatiner application we do not need to expose port
# And you can access the db with the service name 'mongo' 
# This is how to automate testing that involves DB.... It's call Mocking
    code-coverage:
        name: Code Coverage

        container: 
            image: node:18

        services:
          mongodb:
            image: siddharth67/mongo-db:non-prod
            options: 
              --name mongo
        env:
         MONGO_URI: 'mongodb://mongo:32768/superData'
         MONGO_USERNAME: non-prod-user
         MONGO_PASSWORD: non-prod-password

        runs-on: ubuntu-latest

        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        # - name: Setup NodeJS Version - 18
        #   uses: actions/setup-node@v3
        #   with:
        #     node-version: 18

        # - name: Composite Action - Cache & Install NPM Packages
        #   uses: ./.github/custom-actions/npm-action
        #   with:
        #     path-to-folder: node_modules

        - name: Install Dependencies
          run: npm install
    
        - name: Check Code Coverage
          continue-on-error: true
          run: npm run coverage
          
        - name: Archive Test Result
          uses: actions/upload-artifact@v3
          with:
            name: Code-Coverage-Result
            path: coverage
            retention-days: 5

    docker:
        name: Containerization
        needs: [unit-testing, code-coverage]

        #Permission to write to the GHCR package
        permissions: 
          packages: write

        runs-on: ubuntu-latest

        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD }}

        - name: Login to GHCR
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Build Docker image for testing
          uses: docker/build-push-action@v4
          with:
            context: .
            push: false
            tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

        - name: Docker image Test
          run: |
            docker images
            docker run --name solar-system-app -d \
            -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
            -e MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
            ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP

            echo Test the image URL using wget
            wget -q -O- 127.0.0.1:3000/live | grep live

        - name: Container Registry Push
          uses: docker/build-push-action@v4
          with:
            context: .
            push: true
            tags: |
                ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
                ghcr.io/${{ github.repository_owner}}/solar-system:${{ github.sha }}

    dev-deploy:
        if: contains(github.ref, 'feature/')
        needs: [docker]
        uses: ./.github/workflows/reusable-deployment.yml
        secrets:
          k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
          mongodb_password: ${{ secrets.MONGO_PASSWORD }}
        with:
          mongodb-uri: ${{ vars.MONGO_URI }}
          environment: development
          kube-manifest-dir: kubernetes/development/

    
    dev-integration-testing:

        if: contains(github.ref, 'feature/')
        name: Dev Integration Testing
        needs: dev-deploy
        runs-on: ubuntu-latest

        steps:
        - name: Test URL Output using CURL and JQ
          env:
            URL: ${{ needs.dev-deploy.outputs.APP_INGRESS_URL }}  # Refer to the environment variable set earlier
          run: |
            echo $URL
            echo "---------------------------------------------"
            curl https://$URL/live-s-k -s -k | jq -r .status | grep -i live

    prod-deploy:

        if: github.ref == 'refs/heads/main'
        needs: [docker]

        environment: 
            name: prod
            url: https://${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
        outputs:
            APP_INGRESS_URL: ${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
        runs-on: ubuntu-latest

        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
        
        - name: Install Kubectl CLI
          uses: azure/setup-kubectl@v4
          with:
            version: 'v1.26.0'
        
        - name: Set kubeconfig file
          uses: azure/k8s-set-context@v4
          with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}

        - name: Fetch Kubernetes Cluster Details
          run: |
            kubectl version --short
            echo -------------------------------
            kubectl get nodes
        
        - name: Save Nginx Ingress Controller IP as a GITHUB Environment Variable 
          run: |
            echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath="[.status.loadBalancer.ingress[0].ip}")" >> $GITHUB_ENV

        - name: Replace Token in Manifest files
          uses: cschleiden/replace-tokens@v1
          with:
            tokenPrefix: ' { '
            tokenSuffix: ' } '
            files: '["kubernetes/prod/*.yaml"]'
          env:
            NAMESPACE: ${{ vars.NAMESPACE }}
            REPLICAS: ${{ vars.REPLICAS }}
            IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            INGRESS_IP: ${{ env.INGRESS_IP }}

        - name: Check files
          run: |
            cat kubernetes/development/*.yaml
        
        - name: Create MongoDB Secret
          run: |
            kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
            --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
            --from-iteral=MONGO_USERNAME=${{ env.MONGO_USERNAME }} \
            --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
            --save-config \
            --dry-run=client \
            -o yaml | kubectl apply -f -

        - name: Deploy to Prod Env
          run: |
            kubectl apply -f kubernetes/prod

        - name: Set App Ingress Host URL
          id: set-ingress-host-address
          run: |
            echo "APP_INGRESS_HOST=$(kubectl -n ${{ vars.NAMESPACE }} get ingress -o jsonpath="{.items[0].spec.tls[0].hosts[0]}")" >> $GITHUB_ENV
    
    prod-integration-testing:
        if: github.ref == 'refs/heads/main'
        name: Prod Integration Testing
        needs: prod-deploy
        runs-on: ubuntu-latest

        steps:
        - name: Test URL Output using CURL and JQ
          env:
            URL: ${{ needs.prod-deploy.outputs.APP_INGRESS_URL }}  # Refer to the environment variable set earlier
          run: |
            echo $URL
            echo "---------------------------------------------"
            curl https://$URL/live-s-k -s -k | jq -r .status | grep -i live